#! /usr/bin/env python3

# Public Domain (-) 2016-2017 The GitFund Authors.
# See the GitFund UNLICENSE file for details.

"""
Script to generate currency.py from the various metadata.

The countryInfo.txt file can be downloaded from:

* http://download.geonames.org/export/dump/countryInfo.txt

"""

import sys

from datetime import datetime
from os import listdir
from os.path import dirname, join, realpath

if len(sys.argv[1:]) != 2:
    print("Usage: gencurrency path/to/babel/directory path/to/countryInfo.txt")
    sys.exit(1)

BABEL_DIRECTORY = realpath(sys.argv[1])

sys.path.insert(0, dirname(BABEL_DIRECTORY))
sys.path.append(join(dirname(dirname(realpath(__file__))), 'app'))

from babel.core import get_global, Locale
from babel.numbers import get_territory_currencies
from finance import BASE_PRICES, EU_VAT, ZERO_DECIMAL_CURRENCIES, get_tax_spec
from territories import TERRITORY_CODES

DEBUG = False

ALT_CODES = {
    'AT-JU': 'DE',
    'AT-MI': 'AT',
    'DE-BU': 'CH',
    'DE-HL': 'DE',
    'ES-CE': 'EA',
    'ES-CN': 'IC',
    'ES-ML': 'EA',
    'GR-81': 'GR',
    'GR-82': 'GR',
    'GR-83': 'GR',
    'GR-84': 'GR',
    'GR-85': 'GR',
    'GR-MA': 'GR',
    'GR-NS': 'GR',
    'GR-ST': 'GR',
    'IT-CP': 'CH',
    'IT-LV': 'IT',
    'PT-20': 'PT',
    'PT-30': 'PT',
    'SH-AC': 'AC',
    'SH-HL': 'SH',
    'SH-TA': 'TA',
}

PREFERRED_CURRENCIES = {
    'BT': 'INR', # Bhutan
    'BY': 'USD', # Belarus
    'CU': 'USD', # Cuba
    'HT': 'USD', # Haiti
    'LS': 'LSL', # Lesotho
    'NA': 'NAD', # Namibia
    'PS': 'ILS', # Palestine
    'PA': 'USD', # Panama
}

# Seem to be missing CLDR data in Babel for these locales:
#
#    'MV': [('en', 'GB')],    # Dhivehi for the Maldives.
#    'TJ': [('tg', ''),],     # Tajik for Tajikistan.
#
OVERRIDE_LOCALES = {
    'AC': [('en', 'SH')],
    'AQ': [('en', 'US')],    # English for Antarctica. Perhaps should be Russian instead?
    'GS': [('en', 'GB')],    # English for South Georgia & South Sandwich Islands.
    'MV': [('en', 'GB')],
    'TA': [('en', 'SH')],
    'TJ': [('ky', 'KG')],    # Approximate to Kyrgyzstan's locale.
    'TF': [('fr', 'FR')],    # French for the French Southern Territories.
    'VA': [('it', 'IT')],    # Italian for Vatican City.
}

# Set a "primary" locale for some of the territories with multiple ones when the
# countryInfo.txt-based heuristic fails. This, along with the heuristic, is most
# likely inaccurate and needs to be verified locally.
PRIMARY_LOCALES = {
    'AZ': ('az_Latn', 'AZ'),
    'BA': ('bs_Latn', 'BA'),
    'CN': ('zh_Hans', 'CN'),
    'ER': ('ti', 'ER'),
    'HK': ('en', 'HK'),
    'ME': ('sr_Latn', 'ME'),
    'MO': ('en', 'MO'),
    'NO': ('nb', 'NO'),
    'PH': ('fil', 'PH'),
    'RS': ('sr_Latn', 'RS'),
    'SG': ('en', 'SG'),
    'UZ': ('uz_Latn', 'UZ'),
    'VU': ('en', 'VU'),
}

# Currently using resources like https://www.similarweb.com/top-websites, e.g.
# https://www.similarweb.com/top-websites/poland to find the top e-commerce
# sites in territories so as to determine "common" usage.
TERRITORY_FORMATS = {
    'BD': ('¤\xa0', ''),
    'BT': ('¤\xa0', ''),
    'EG': ('', '\xa0¤'),
    'GL': ('', '\xa0¤'),
    'IL': ('¤\xa0', ''),
    'KR': ('', '¤'),
    'MA': ('', '\xa0¤'),
    'NO': ('', '\xa0¤'),
    'PE': ('¤\xa0', ''),
    'SH-TA': ('¤\xa0', ''),
    'TH': ('', '\xa0¤'),
    'TR': ('', '\xa0¤'),
}

TERRITORY_FORMATS['EH'] = TERRITORY_FORMATS['MA']
TERRITORY_FORMATS['PS'] = TERRITORY_FORMATS['IL']
TERRITORY_FORMATS['SJ'] = TERRITORY_FORMATS['NO']

CURRENCY_SYMBOLS = {
    'ARS': 'AR$',
    'AUD': 'AU$',
    'AED': 'AED',
    'BDT': 'Tk.',
    'BND': 'BN$',
    'BSD': 'BS$',
    'CAD': 'CA$',
    'COP': 'CO$',
    'DKK': 'kr.',
    'EGP': 'ج.م.',
    'HRK': 'kn',
    'KRW': '원',
    'LSL': 'M',
    'MAD': 'Dhs',
    'MXN': 'MX$',
    'NAD': 'NA$',
    'NOK': 'kr',   # ',-' for round amounts
    'NZD': 'NZ$',
    'PEN': 'S/.',
    'RON': 'Lei',
    'RUB': 'руб.',
    'SAR': 'SR',
    'SEK': 'kr',   # ':-' for round amounts
    'SGD': 'SG$',
    'THB': 'บาท',
    'TRY': 'TL',
    'TWD': 'NT$',
    'UAH': 'грн',
    'USD': 'US$',
}

def exit(msg):
    print("ERROR: %s" % msg)
    sys.exit(1)

LANGUAGES = {}
LOCALE_DIR = join(BABEL_DIRECTORY, 'locale-data')
LOCALES = [file[:-4] for file in listdir(LOCALE_DIR) if file.endswith('.dat')]
TERRITORY2LOCALES = {}

for locale in LOCALES:
    if '_' in locale:
        split = locale.rsplit('_', 1)
        territory = split[1]
        if len(territory) == 2:
            if territory not in TERRITORY2LOCALES:
                TERRITORY2LOCALES[territory] = []
            TERRITORY2LOCALES[territory].append((split[0], territory))

with open(sys.argv[2], 'r') as info_file:
    for line in info_file:
        line = line.strip()
        if not line:
            continue
        if line.startswith('#'):
            continue
        split = line.split('\t')
        code = split[0]
        langs = split[15]
        if not langs:
            if code not in ('AQ', 'BV', 'HM'):
                exit("Unexpected territory with no language specified: %s" % code)
        langs_split = langs.split(',')
        for lang in langs_split:
            if '-' in lang:
                lang_split = lang.split('-')
                if len(lang_split) != 2 or lang_split[1] != code:
                    if (code, lang) != ('CX', 'ms-CC'):
                        exit("Unexpected locale qualifier for lang %r in territory %r" % (lang, code))
        LANGUAGES[code] = langs_split

TERRITORY2CURRENCY = {}
SEEN_SYMBOLS = {}

for territory in sorted(TERRITORY_CODES):

    code = ALT_CODES.get(territory, territory)
    currencies = get_territory_currencies(code)

    # Should only be left with Antarctica without any official currencies.
    if not currencies:
        if code != 'AQ':
            exit("Missing currency for: %s" % code)
        currencies = ['USD']

    # Select a preferred currency for territories where multiple currencies are
    # legal local tender.
    if len(currencies) != 1:
        if code not in PREFERRED_CURRENCIES:
            exit("Missing preferred currency for: %s" % code)
        currency = PREFERRED_CURRENCIES[code]
    else:
        currency = currencies[0]

    # Use USD as the default when the currency is not in our supported list.
    if currency not in BASE_PRICES:
        if DEBUG == 2:
            print("%s https://en.wikipedia.org/wiki/ISO_3166-2:%s" % (currency, code))
        currency = 'USD'

    if code not in TERRITORY2LOCALES:
        if code in OVERRIDE_LOCALES:
            TERRITORY2LOCALES[code] = OVERRIDE_LOCALES[code]
        else:
            exit("Territory is lacking CLDR data: %s" % code)

    base_price = BASE_PRICES[currency]
    locales = TERRITORY2LOCALES[code]
    if len(locales) == 1:
        lang, locale_code = locales[0]
    elif code in PRIMARY_LOCALES:
        lang, locale_code = PRIMARY_LOCALES[code]
    else:
        langs = LANGUAGES[code]
        found = None
        idx = 0
        for lang in langs:
            if '-' in lang:
                lang = tuple(lang.split('-'))
            else:
                lang = (lang, code)
            if lang in locales:
                found = (idx, lang)
                break
            idx += 1
        if (not found) or (found[0]):
            print(locales)
            print(langs)
            print("https://en.wikipedia.org/wiki/ISO_3166-2:%s" % code)
            print("")
            exit("Unable to determine primary locale for: %s" % code)
        lang, locale_code = found[1]

    locale = Locale(lang, locale_code)
    locale_str = '%s_%s' % (lang, locale_code)
    fmt = locale.currency_formats['standard']
    dec_symbol = locale.number_symbols.get('decimal', '.')

    if fmt.exp_prec:
        exit("Unexpected exp_prec for: %s" % locale_str)

    if '@' in fmt.pattern:
        exit("Unexpected significant digits pattern for: %s" % locale_str)

    if fmt.scale:
        exit("Unexpected scale factor for: %s" % locale_str)

    if fmt.int_prec[0] != 1:
        exit("Unexpected minimum int_prec for: %s" % locale_str)

    prefix = fmt.prefix[0]
    if prefix not in ('', '\xa4', '\xa4\xa0', '\u200f', '\u200e\xa4\xa0'):
        exit("Unexpected currency prefix for: %s" % locale_str)

    suffix = fmt.suffix[0]
    if suffix not in ('', '\xa4', '\xa0\xa4'):
        exit("Unexpected currency suffix for: %s" % locale_str)

    grouping = fmt.grouping
    if grouping not in ((3, 3), (3, 2), (1000, 1000)):
        exit("Unexpected grouping for: %s" % locale_str)

    group_symbol = locale.number_symbols.get('group', ',')
    if group_symbol not in (",", ".", "'", '\xa0', '\u2019'):
        exit("Unexpected group symbol for: %s" % locale_str)

    if currency in CURRENCY_SYMBOLS:
        if territory == 'US':
            currency_symbol = '$'
        else:
            currency_symbol = CURRENCY_SYMBOLS[currency]
    else:
        currency_symbol = locale.currency_symbols.get(currency, 'UNKNOWN')
        if currency_symbol == 'UNKNOWN':
            exit("Unknown currency symbol for %r in locale %r" % (currency, locale_str))

    if currency not in SEEN_SYMBOLS:
        SEEN_SYMBOLS[currency] = {}
    _seen = SEEN_SYMBOLS[currency]
    if currency_symbol not in _seen:
        _seen[currency_symbol] = []
    _seen[currency_symbol].append(territory)

    if territory in TERRITORY_FORMATS:
        prefix, suffix = TERRITORY_FORMATS[territory]

    # Normalise the prefix/suffix for non-US currencies denominated in dollars.
    if currency_symbol.endswith('$') and currency != '$':
        if prefix and prefix != '¤\xa0':
            prefix = '¤\xa0'
        elif suffix and suffix != '\xa0¤':
            suffix = '\xa0¤'

    prefix = prefix.replace('¤', currency_symbol)
    suffix = suffix.replace('¤', currency_symbol)

    TERRITORY2CURRENCY[territory] = (
        currency, prefix, suffix, grouping, group_symbol, dec_symbol
    )

# Sanity check decimal places for currencies.
currency_fractions = get_global('currency_fractions')
default_prec = currency_fractions['DEFAULT']
for currency in BASE_PRICES:
    prec = currency_fractions.get(currency, default_prec)[0]
    if prec == 2:
        continue
    if prec == 0:
        if currency not in ZERO_DECIMAL_CURRENCIES:
            exit("Currency %r expects zero decimal places, but is not in ZERO_DECIMAL_CURRENCIES" % currency)
        continue
    exit("Currency %r expects %d decimal places" % (currency, prec))

# Figure out, for VAT purposes, which EU territories are set to use a different
# currency from the national one.
ALTERNATE_EU_VAT_CURRENCY = {}
now = datetime.utcnow()
for territory in TERRITORY2CURRENCY:
    tax = get_tax_spec(territory, now)
    if not tax:
        continue
    if not tax.type == EU_VAT:
        continue
    using = TERRITORY2CURRENCY[territory][0]
    expected = get_territory_currencies(territory.split('-')[0])[0]
    if using != expected:
        ALTERNATE_EU_VAT_CURRENCY[territory] = expected

if DEBUG:
    for currency in sorted(SEEN_SYMBOLS):
        print("%s: %s" % (currency, repr(SEEN_SYMBOLS[currency])))
    sys.exit(0)

print("""# encoding: utf-8

# DO NOT EDIT
# AUTOGENERATED BY GENCURRENCY

from __future__ import unicode_literals
from collections import namedtuple

Format = namedtuple(
    'Format', [
        'currency', 'prefix', 'suffix', 'grouping', 'group_symbol',
        'dec_symbol'
    ]
)

ALTERNATE_EU_VAT_CURRENCY = {""")

for territory in sorted(ALTERNATE_EU_VAT_CURRENCY):
    print("    '%s': '%s'," % (territory, ALTERNATE_EU_VAT_CURRENCY[territory]))

print("""}

RTL_CURRENCIES = set([
    'EGP',
])

TERRITORY2CURRENCY = {""")

for territory in sorted(TERRITORY2CURRENCY):
    fmt = TERRITORY2CURRENCY[territory]
    print("    '%s': Format%s," % (territory, repr(fmt)))

print("""}

# This function is adapted from numbers.py in the BSD-licensed Babel library:
# https://github.com/python-babel/babel/blob/master/LICENSE
#
# Expects amount to be a string. If with_decimals is set to True, then the
# amount needs to have been quantized to the appropriate decimal places.
# Otherwise, it needs to be an integral value.
def format(self, amount, with_decimals=False, as_html=False):
    if with_decimals:
        amount, rem = amount.split('.')
    gsize, ngsize = self.grouping
    group_symbol = self.group_symbol
    num = ''
    while len(amount) > gsize:
        num = group_symbol + amount[-gsize:] + num
        amount = amount[:-gsize]
        gsize = ngsize
    if with_decimals:
        num = self.prefix + amount + num + self.dec_symbol + rem + self.suffix
    else:
        num = self.prefix + amount + num + self.suffix
    if as_html and self.currency in RTL_CURRENCIES:
        return '<span dir="rtl">%s</span>' % num
    return num

Format.format = format

if __name__ == '__main__':

    import os.path as path
    import sys

    sys.path.append(path.realpath(path.dirname(__file__)))

    from finance import BASE_PRICES

    for territory in sorted(TERRITORY2CURRENCY):
        fmt = TERRITORY2CURRENCY[territory]
        price = BASE_PRICES[fmt.currency][-1] * 100
        print "%5s:\t%s" % (territory, fmt.format(str(price)))""")
