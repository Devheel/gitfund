#! /usr/bin/env python2

# Public Domain (-) 2017 The GitFund Authors.
# See the GitFund UNLICENSE file for details.

"""Script to create subscription plans using the Stripe API."""

import sys

from os import environ, pathsep
from os.path import dirname, isfile, join

from plandata import PLANS

import stripe
import stripe.http_client

from stripe.error import InvalidRequestError

gcloud_sdk = ""
for path in environ["PATH"].split(pathsep):
    file_path = join(path, 'dev_appserver.py')
    if isfile(file_path):
        gcloud_sdk = dirname(path)
        break
else:
    print "ERROR: Unable to locate dev_appserver.py on the $PATH."
    sys.exit(1)

# Insert this after importing the stripe library to avoid use of the urlfetch
# HTTP client.
sys.path.insert(0, join(gcloud_sdk, 'platform', 'google_appengine'))

if sys.argv[1:] and sys.argv[1] == '--live':
    environ['SERVER_SOFTWARE'] = 'Google'
    expect_live = True
else:
    expect_live = False

# Import from config after including the google_appengine libs.
from config import LIVE, STRIPE_SECRET_KEY

stripe.api_key = STRIPE_SECRET_KEY

if expect_live and not LIVE:
    print "ERROR: LIVE is set to False in config.py"
    sys.exit(1)

print ">> Creating stripe plans ..."

def get_sort_key((id, (amount, currency, _))):
    return (currency, id.endswith('.vat'), amount)

for id, (amount, currency, name) in sorted(PLANS.items(), key=get_sort_key):
    try:
        stripe.Plan.retrieve(id)
    except InvalidRequestError:
        stripe.Plan.create(
            id=id,
            amount=amount,
            currency=currency,
            interval='month',
            name=name,
            statement_descriptor='GITFUND'
            )
    print ".. created:", id
