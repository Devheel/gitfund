#! /usr/bin/env python2

# Public Domain (-) 2017 The GitFund Authors.
# See the GitFund UNLICENSE file for details.

"""Script to create subscription plans using the Stripe API."""

import sys

from os import environ, pathsep
from os.path import dirname, isfile, join, realpath

app_path = join(dirname(dirname(realpath(__file__))), 'app')

gcloud_sdk = ""
for path in environ["PATH"].split(pathsep):
    file_path = join(path, 'dev_appserver.py')
    if isfile(file_path):
        gcloud_sdk = dirname(path)
        break
else:
    print "ERROR: Unable to locate dev_appserver.py on the $PATH."
    sys.exit(1)

sys.path.append(app_path)
sys.path.append(join(app_path, 'lib'))

import stripe
import stripe.http_client

from stripe.error import InvalidRequestError

sys.path.insert(0, join(gcloud_sdk, 'platform', 'google_appengine'))

from config import STRIPE_SECRET_KEY
from finance import BASE_PRICES, PLAN_FACTORS, ZERO_DECIMAL_CURRENCIES

stripe.api_key = STRIPE_SECRET_KEY

print ">> Validating currencies ..."

to_remove = set()
max_factor = PLAN_FACTORS[-1][1]

for currency in sorted(BASE_PRICES):
    for base_price in BASE_PRICES[currency]:
        if currency in ZERO_DECIMAL_CURRENCIES:
            amount = base_price * max_factor
        else:
            amount = base_price * max_factor * 100
        if amount >= 99999999:
            to_remove.add(currency)

if to_remove:
    print "ERROR: Some amounts are greater than the max Stripe limit of 99999999"
    for currency in sorted(to_remove):
        print "ERROR: %s" % currency
    sys.exit(1)
else:
    print '.. all currency amounts are valid!'

print ">> Creating stripe plans ..."

for currency in sorted(BASE_PRICES):
    for idx, base_price in enumerate(BASE_PRICES[currency]):
        version = idx + 1
        for plan_id, factor in PLAN_FACTORS:
            id = "gitfund.%s.%s.v%s" % (plan_id, currency.lower(), version)
            try:
                plan = stripe.Plan.retrieve(id)
            except InvalidRequestError:
                if currency in ZERO_DECIMAL_CURRENCIES:
                    amount = base_price * factor
                else:
                    amount = base_price * factor * 100
                stripe.Plan.create(
                    id=id,
                    amount=amount,
                    currency=currency,
                    interval='month',
                    name='GitFund %s (%s)' % (plan_id.title(), currency),
                    statement_descriptor='GITFUND'
                )
                print ".. created:", id
