#! /usr/bin/env python2

# Public Domain (-) 2017 The GitFund Authors.
# See the GitFund UNLICENSE file for details.

"""Script to create subscription plans using the Stripe API."""

import sys

from os import environ, pathsep
from os.path import dirname, isfile, join, realpath

app_path = join(dirname(dirname(realpath(__file__))), 'app')

gcloud_sdk = ""
for path in environ["PATH"].split(pathsep):
    file_path = join(path, 'dev_appserver.py')
    if isfile(file_path):
        gcloud_sdk = dirname(path)
        break
else:
    print "ERROR: Unable to locate dev_appserver.py on the $PATH."
    sys.exit(1)

sys.path.append(app_path)
sys.path.append(join(app_path, 'lib'))

import stripe
import stripe.http_client

from stripe.error import InvalidRequestError

sys.path.insert(0, join(gcloud_sdk, 'platform', 'google_appengine'))

if sys.argv[1:] and sys.argv[1] == '--live':
    environ['SERVER_SOFTWARE'] = 'Google'
    expect_live = True
else:
    expect_live = False

from config import LIVE, STRIPE_SECRET_KEY
from minfin import PLAN_AMOUNTS, PLAN_AMOUNTS_GB, PLAN_VERSION

stripe.api_key = STRIPE_SECRET_KEY
version = 'v%d' % PLAN_VERSION

if expect_live and not LIVE:
    print "ERROR: LIVE is set to False in config.py"
    sys.exit(1)

def get_or_create(id, amount, name):
    try:
        stripe.Plan.retrieve(id)
    except InvalidRequestError:
        stripe.Plan.create(
            id=id,
            amount=amount * 100,
            currency='GBP',
            interval='month',
            name=name,
            statement_descriptor='GITFUND'
            )
    print ".. created:", id

print ">> Creating stripe plans ..."

for plan, amount in sorted(PLAN_AMOUNTS.items(), key=lambda item: item[1]):
    plan_id = '%s.%s' % (plan, version)
    get_or_create(
        plan_id, amount, '%s Sponsorship (%s)' % (plan.title(), version)
        )
    get_or_create(
        plan_id + '.gb', PLAN_AMOUNTS_GB[plan],
        '%s Sponsorship (%s, GB)' % (plan.title(), version)
        )
