#! /usr/bin/env python3

# Public Domain (-) 2016 The GitFund Authors.
# See the GitFund UNLICENSE file for details.

"""Script to generate countries.py from the pycountry JSON metadata."""

import json
import sys

from itertools import islice

if len(sys.argv[1:]) != 1:
    print("Usage: gencountries path/to/iso3166-1.json")
    sys.exit(1)

alt_codes = {}
code2name = {}
name2code = {}

def get_sort_name(name):
    if name == 'Åland Islands':
        return 'Aland Islands'
    if name == "Côte d'Ivoire":
        return "Cote d'Ivoire"
    if name == 'Réunion':
        return "Reunion"
    if name == 'São Tomé & Príncipe':
        return 'Sao Tome & Principe'
    return name

def mk(code, name):
    code2name[code] = name
    name2code[name] = code

def mkalt(official_code, alt_code, name):
    code2name[alt_code] = name
    name2code[name] = alt_code
    alt_codes[alt_code] = official_code

def remove(code):
    del name2code[code2name[code]]
    del code2name[code]

def rename(code, name):
    del name2code[code2name[code]]
    mk(code, name)

for data in json.loads(open(sys.argv[1], 'r').read())['3166-1']:
    mk(data["alpha_2"], data["name"])

# Notes:
#
# - Although together they form a single territory, Saint Helena, Ascension and
#   Tristan da Cunha (SH) use different currencies (Saint Helena and Ascension
#   Island use SHP while Tristan uses GBP). This may cause complications later
#   and thus splitting it up into separate territories, i.e. SH-HL, SH-AC, and
#   SH-TA.
#
# - There are currently no official ISO 3166-1 codes for Spanish territories
#   like Ceuta, Melilla, and the Canary Islands.
#
# - The following territories might need further investigation: Clipperton
#   Island (minor overseas territory of France); Diego Garcia (administered
#   under the British Indian Ocean Territory).
#
# - Heard Island and McDonald Islands (HM) are currently uninhabited.
#
# - Kosovo is only a partially recognised state and disputed by Serbia.
#
# - Using "Macau" for now instead of the official English "Macao".
#
# - Not sure if the shortening of "Saint" to "St." is purely a British thing or
#   if it is acceptable globally.

remove('HM')
remove('SH')

rename('AG', 'Antigua & Barbuda')
rename('BA', 'Bosnia & Herzegovina')
rename('BL', 'St. Barthélemy')
rename('BN', 'Brunei')
rename('BO', 'Bolivia')
rename('BQ', 'Caribbean Netherlands')
rename('CD', 'Congo (DRC)')
rename('CG', 'Congo (Republic)')
rename('CV', 'Cape Verde')
rename('CZ', 'Czechia')
rename('FM', 'Micronesia')
rename('GS', 'South Georgia & South Sandwich Islands')
rename('IR', 'Iran')
rename('KN', 'St. Kitts & Nevis')
rename('KP', 'North Korea')
rename('KR', 'South Korea')
rename('LA', 'Laos')
rename('LC', 'St. Lucia')
rename('MD', 'Moldova')
rename('MF', 'St. Martin')
rename('MK', 'Macedonia')
rename('MO', 'Macau')
rename('PM', 'St. Pierre & Miquelon')
rename('PS', 'Palestine')
rename('RU', 'Russia')
rename('SJ', 'Svalbard & Jan Mayen')
rename('ST', 'São Tomé & Príncipe')
rename('SX', 'Sint Maarten')
rename('SY', 'Syria')
rename('TC', 'Turks & Caicos Islands')
rename('TT', 'Trinidad & Tobago')
rename('TW', 'Taiwan')
rename('TZ', 'Tanzania')
rename('UM', 'U.S. Outlying Islands')
rename('VA', 'Vatican City')
rename('VC', 'St. Vincent & Grenadines')
rename('VE', 'Venezuela')
rename('VG', 'British Virgin Islands')
rename('VI', 'U.S. Virgin Islands')
rename('VN', 'Vietnam')
rename('WF', 'Wallis & Futuna')

mkalt('SH', 'SH-AC', 'Ascension Island')
mkalt('SH', 'SH-HL', 'St. Helena')
mkalt('SH', 'SH-TA', 'Tristan da Cunha')

mkalt('ES', 'ES-CN', 'Canary Islands')
mkalt('ES', 'ES-CE', 'Ceuta')
mkalt('ES', 'ES-ML', 'Melilla')

mkalt('RS', 'XK', 'Kosovo')

# Sanity check that a code isn't reused.
seen = set()
for code in name2code.values():
    if code in seen:
        print("ERROR: Already seen code %r" % code)
        sys.exit(1)
    seen.add(code)

print("# encoding: utf-8\n")
print("# DO NOT EDIT")
print("# AUTOGENERATED BY GENCOUNTRIES")
print("\nfrom __future__ import unicode_literals\n")

codes = set()
print("COUNTRIES = (")
for country in sorted(name2code, key=get_sort_name):
    print("    (%r, %r)," % (country, name2code[country]))
    codes.add(name2code[country])
print(")\n")

line = 3
print("COUNTRY_CODES = set([")
print("   ", end="")
for code in sorted(codes):
    extra = len(code) + 4
    if (line + extra) > 80:
        line = 3
        print("\n   ", end="")
    print(" '%s'" % code, end=",")
    line += extra
print("\n])\n")

print("COUNTRY_ALTCODES = {")
for code in sorted(alt_codes):
    print("    '%s': '%s'," % (code, alt_codes[code]))
print("}\n")