#! /usr/bin/env python3

# Public Domain (-) 2016 The GitFund Authors.
# See the GitFund UNLICENSE file for details.

"""Script to generate emoji.py from EmojiOne's JSON metadata."""

import json
import sys

if len(sys.argv[1:]) != 2:
    print("Usage: genemoji PATH_TO_EMOJI_JSON URL_PREFIX_FOR_EMOJI_DIRECTORY")
    sys.exit(1)

meta = json.loads(open(sys.argv[1], 'r').read())

bytes2shortcodes = []
shortcodes2markdown = {}
md_template = "![:%%s:](%s%%s.svg){: .e}" % sys.argv[2]

for shortcode, info in meta.items():
    hexcode = info['unicode']
    chars = repr(''.join(
        chr(int(char, 16)) for char in hexcode.split('-')
        ).encode('utf-8'))[1:]
    shortcodes2markdown[shortcode] = md_template % (shortcode, hexcode)
    for alias in info['aliases']:
        alias = alias[1:-1]
        shortcodes2markdown[alias] = md_template % (alias, hexcode)
    bytes2shortcodes.append((chars, info['shortname']))

print("# DO NOT EDIT")
print("# AUTOGENERATED BY GENEMOJI")
print("")

print("EMOJI_SHORTCODES = {")
for shortcode in sorted(shortcodes2markdown):
    print("  '%s': '%s'," % (shortcode, shortcodes2markdown[shortcode]))
print("}\n")

# Use reverse order so that more specific byte sequences, e.g. skin tone
# modifiers, are checked first.
print("EMOJI_MAP = (")
for chars, shortcode in sorted(bytes2shortcodes, reverse=True):
    print("  (%s, '%s')," % (chars, shortcode))
print(")")
