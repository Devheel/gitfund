#! /usr/bin/env python3

# Public Domain (-) 2016 The GitFund Authors.
# See the GitFund UNLICENSE file for details.

"""Script to generate territories.py from the pycountry JSON metadata."""

import json
import sys

if len(sys.argv[1:]) != 1:
    print("Usage: genterritories path/to/iso3166-1.json")
    sys.exit(1)

groups = {}
code2name = {}
name2code = {}

SORT_NAMES = {
    'Åland Islands': 'Aland Islands',
    "Côte d'Ivoire": "Cote d'Ivoire",
    'Réunion': 'Reunion',
    'São Tomé & Príncipe': 'Sao Tome & Principe'
}

def get_sort_key(name):
    return SORT_NAMES.get(name, name)

def group(primary, *regions):
    groups[primary] = regions

def join(xs):
    if len(xs) == 2:
        return ' and '.join(xs)
    return ', '.join(xs[:-1]) + ', and ' + xs[-1]

def mk(code, name):
    code2name[code] = name
    name2code[name] = code

def remove(code):
    del name2code[code2name[code]]
    del code2name[code]

def rename(code, name):
    del name2code[code2name[code]]
    mk(code, name)

for data in json.loads(open(sys.argv[1], 'r').read())['3166-1']:
    mk(data["alpha_2"], data["name"])

# Notes:
#
# - The use of grouping is somewhat rather arbitrary, e.g. Åland Islands aren't
#   grouped as part of Finland, Greenland isn't grouped as part of Denmark, etc.
#   But, for now, using the fact that those territories have a top level ISO
#   code to keep them ungrouped.
#
# - The following territories might need further investigation: Clipperton
#   Island (minor overseas territory of France); Diego Garcia (administered
#   under the British Indian Ocean Territory).
#
# - Although together they form a single territory, Saint Helena, Ascension and
#   Tristan da Cunha (SH) use different currencies (Saint Helena and Ascension
#   Island use SHP while Tristan uses GBP). This may cause complications later
#   and thus splitting it up into separate territories, i.e. SH-HL, SH-AC, and
#   SH-TA.
#
remove('SH')

mk('SH', 'St. Helena')
mk('SH-AC', 'Ascension Island')
mk('SH-TA', 'Tristan da Cunha')

group('SH', 'SH-AC', 'SH-TA')

# - Uninhabited: Heard Island and McDonald Islands (HM); Bouvet Island (BV).
#
remove('BV')
remove('HM')

# - Kosovo is only a partially recognised state and disputed by Serbia.
#
mk('XK', 'Kosovo')

# - Remove the Maldives (MV) and Tajikistan (TJ) for now as we seem to be
#   missing CLDR data in Babel.
#
remove('MV')
remove('TJ')

# - Remove Hungary (HU) as the Hungarian forint (HUF) creates values which
#   exceed the Stripe charge limit of 9999999, and being inside the EU means
#   we need to charge people from Hungary in forints for sane VAT purposes.
#
remove('HU')

# - Although there are currently no official ISO 3166-1 codes for Spanish
#   territories like Ceuta, Melilla, and the Canary Islands, codes have been
#   reserved for them.
#
mk('ES-CN', 'Canary Islands')
mk('ES-CE', 'Ceuta')
mk('ES-ML', 'Melilla')

group('ES', 'ES-CN', 'ES-CE', 'ES-ML')

# - Azores and Madeira don't have ISO 3166-1 codes, but they do have ISO 3166-2
#   codes, so using them for purposes of distinguishing the regions for VAT
#   purposes.
mk('PT-20', 'Azores')
mk('PT-30', 'Madeira')

group('PT', 'PT-20', 'PT-30')

# - Various areas have special EU VAT rules in relation to the sovereign state
#   they are part of, but don't have independent ISO 3166 codes:
#
#   * Austria: Jungholz, and Mittelberg.
#
mk('AT-JU', 'Jungholz')
mk('AT-MI', 'Mittelberg')

group('AT', 'AT-JU', 'AT-MI')

#   * Cyprus: United Kingdom Sovereign Base Areas of Akrotiri and Dhekelia.
#
#   * Germany: Büsingen, and Heligoland.
#
mk('DE-BU', 'Büsingen')
mk('DE-HL', 'Heligoland')

group('DE', 'DE-BU', 'DE-HL')

#   * Greece: Chios, Cyclades, Dodecanese, Lesbos, Northern Sporades, Samos,
#     Samothrace, and Mount Athos. Some of which have ISO regional codes.
#
mk('GR-85', 'Chios')
mk('GR-82', 'Cyclades')
mk('GR-81', 'Dodecanese')
mk('GR-83', 'Lesbos')
mk('GR-MA', 'Mount Athos')
mk('GR-NS', 'Northern Sporades')
mk('GR-84', 'Samos')
mk('GR-ST', 'Samothrace')

group('GR', 'GR-85', 'GR-82', 'GR-81', 'GR-83', 'GR-MA', 'GR-NS', 'GR-84', 'GR-ST')

#   * Italy: Campione d'Italia, Lake Lugano, and Livigno.
#
mk('IT-CP', "Campione d'Italia")
mk('IT-LV', 'Livigno')

group('IT', 'IT-CP', 'IT-LV')

# - Not sure if the shortening of "Saint" to "St." is purely a British thing or
#   if it is acceptable globally.
#
rename('AG', 'Antigua & Barbuda')
rename('BA', 'Bosnia & Herzegovina')
rename('BL', 'St. Barthélemy')
rename('BN', 'Brunei')
rename('BO', 'Bolivia')
rename('BQ', 'Caribbean Netherlands')
rename('CD', 'Congo (DRC)')
rename('CG', 'Congo (Republic)')
rename('CV', 'Cape Verde')
rename('CZ', 'Czechia')
rename('FM', 'Micronesia')
rename('GS', 'South Georgia & South Sandwich Islands')
rename('IR', 'Iran')
rename('KN', 'St. Kitts & Nevis')
rename('KP', 'North Korea')
rename('KR', 'South Korea')
rename('LA', 'Laos')
rename('LC', 'St. Lucia')
rename('MD', 'Moldova')
rename('MF', 'St. Martin')
rename('MK', 'Macedonia')
rename('PM', 'St. Pierre & Miquelon')
rename('PS', 'Palestine')
rename('RU', 'Russia')
rename('SJ', 'Svalbard & Jan Mayen')
rename('ST', 'São Tomé & Príncipe')
rename('SX', 'Sint Maarten')
rename('SY', 'Syria')
rename('TC', 'Turks & Caicos Islands')
rename('TT', 'Trinidad & Tobago')
rename('TW', 'Taiwan')
rename('TZ', 'Tanzania')
rename('UM', 'U.S. Outlying Islands')
rename('VA', 'Vatican City')
rename('VC', 'St. Vincent & Grenadines')
rename('VE', 'Venezuela')
rename('VG', 'British Virgin Islands')
rename('VI', 'U.S. Virgin Islands')
rename('VN', 'Vietnam')
rename('WF', 'Wallis & Futuna')

# Sanity check that a code isn't reused.
codes = set()
for code in name2code.values():
    if code in codes:
        print("ERROR: Already seen code %r" % code)
        sys.exit(1)
    codes.add(code)

territories = {}
for name, code in name2code.items():
    territories[name] = [(name, code)]

exceptions = {}
for primary, region_codes in groups.items():
    regions = [territories.pop(code2name[code])[0] for code in region_codes]
    info = sorted(regions, key=lambda k: get_sort_key(k[0]))
    territories[code2name[primary]][0:0] = info
    exceptions[primary] = join([name for name, _ in info])

print("# encoding: utf-8\n")
print("# DO NOT EDIT")
print("# AUTOGENERATED BY GENTERRITORIES")
print("\nfrom __future__ import unicode_literals\n")

print("TERRITORIES = (")
for territory in sorted(territories, key=get_sort_key):
    print("    %r," % territories[territory])
print(")\n")

line = 3
print("TERRITORY_CODES = set([")
print("   ", end="")
for code in sorted(codes):
    extra = len(code) + 4
    if (line + extra) > 80:
        line = 3
        print("\n   ", end="")
    print(" '%s'" % code, end=",")
    line += extra
print("\n])\n")

print("TERRITORY_EXCEPTIONS = {")
for code in sorted(exceptions):
    print("    %r: %r," % (code, exceptions[code]))
print("}\n")
